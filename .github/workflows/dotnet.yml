name: .NET

on:
  push:
    branches: ["ci/actions"]
  pull_request:
    branches: ["main"]
  release:
    types: [created]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  APP_SRC_DIRECTORY: "trisatenergy_smartmeters"
  APP_PUBLISH_OUTPUT_DIRECTORY: "dist"

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name != 'release'
    environment: default
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          cache: true
          cache-dependency-path: "**/package-lock.json"
      - name: Restore dependencies
        run: dotnet restore --locked-mode
      - name: Build
        run: dotnet build --no-restore
      - name: Test
        run: dotnet test --no-build --verbosity normal

  release-artifact:
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created'
    environment: default
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          cache: true
          cache-dependency-path: "**/package-lock.json"
      - name: cd into app directory
        run: cd $APP_SRC_DIRECTORY
      - name: Restore dependencies
        run: dotnet restore --locked-mode
      - name: dotnet publish
        run: dotnet publish --no-restore -o $APP_PUBLISH_OUTPUT_DIRECTORY --property:PublishTrimmed=true --property:Version=${{github.event.release.tag_name}}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-publish-artifact-cache
          path: $APP_PUBLISH_OUTPUT_DIRECTORY
      - name: Create package archive
        run: |
          mkdir -p /tmp/release
          cp -r $APP_PUBLISH_OUTPUT_DIRECTORY /tmp/release
          cp README.md /tmp/release
          tar -czf ${{github.event.repository.name}}-${{github.event.release.tag_name}}.tar.gz -C /tmp/release .
      - name: Upload to GH release
        run: gh release upload ${{github.event.release.tag_name}} ${{github.event.repository.name}}-${{github.event.release.tag_name}}.tar.gz

  release-docker:
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-latest
    needs: [release-artifact]
    environment: default
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dotnet-publish-artifact-cache
          path: $APP_PUBLISH_OUTPUT_DIRECTORY
      - name: Login to Docker Hub
        run: echo "${{ secrets.GH_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Fetch Docker Image Cache
        run: docker pull $IMAGE_URL:latest || true
      - name: Build Docker Image and tag with version
        run: |
          docker build -t $IMAGE_URL:${{ github.event.release.tag_name }} \
          --build-arg ARTIFACT_PATH=$APP_PUBLISH_OUTPUT_DIRECTORY \
          -f Dockerfile .
      - name: Generate lowercase registry URL
        run: |
          echo REGISTRY_URL=ghcr.io/${{ github.repository }} | tr '[:upper:]' '[:lower:]' >> "$GITHUB_ENV"
      - name: Push Docker Image
        run: docker push $IMAGE_URL:${{ github.event.release.tag_name }}
      - name: Tag Docker Image with latest
        run: |
          if [[ "${{ github.event.release.prerelease }}" == "false" ]]; then
            docker tag $IMAGE_URL:${{ github.event.release.tag_name }} $IMAGE_URL:latest
            docker push $IMAGE_URL:latest
          fi

  semantic_release:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta'
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN}}
    environment: default
    needs: [test]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-cache
          restore-keys: |
            ${{ runner.os }}-npm-cache
      - name: Install Dependencies
        run: |
          npm install semantic-release \
            conventional-changelog-conventionalcommits \
            @semantic-release/commit-analyzer \
            @semantic-release/git \
            @semantic-release/github \
            @semantic-release/exec \
            @semantic-release/changelog
      - name: Run Semantic Release
        run: npx semantic-release
