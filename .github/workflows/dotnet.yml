name: .NET

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]
  release:
    types: [created]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  APP_SRC_DIRECTORY: "trisatenergy_smartmeters"
  APP_PUBLISH_OUTPUT_DIRECTORY: "dist"

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name != 'release'
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
          cache: true
          cache-dependency-path: "**/packages.lock.json"
      - name: Restore dependencies
        run: dotnet restore --locked-mode
      - name: Build
        run: dotnet build --no-restore
      - name: Test
        run: dotnet test --no-build --verbosity normal

  release-artifact:
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created'
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
          cache: true
          cache-dependency-path: "**/packages.lock.json"
      - name: Restore dependencies
        run: dotnet restore --locked-mode
      - name: dotnet publish
        run: dotnet publish ${{env.APP_SRC_DIRECTORY}} --no-restore -o ${{env.APP_PUBLISH_OUTPUT_DIRECTORY}} --property:Version=${{github.event.release.tag_name}}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-publish-artifact-cache
          path: ${{env.APP_PUBLISH_OUTPUT_DIRECTORY}}
      - name: Create package archive
        run: |
          mkdir -p /tmp/release
          cp -r ${{env.APP_PUBLISH_OUTPUT_DIRECTORY}} /tmp/release
          cp README.md /tmp/release
          tar -czf ${{github.event.repository.name}}-${{github.event.release.tag_name}}.tar.gz -C /tmp/release .
      - name: Upload to GH release
        run: gh release upload ${{github.event.release.tag_name}} ${{github.event.repository.name}}-${{github.event.release.tag_name}}.tar.gz

  release-docker:
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    needs: [release-artifact]
    steps:
      - uses: actions/checkout@v4

      # Download artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dotnet-publish-artifact-cache
          path: ${{env.APP_PUBLISH_OUTPUT_DIRECTORY}}

      # Generate the registry URL
      - name: Generate lowercase registry URL
        run: |
          echo "IMAGE_URL=`echo ghcr.io/${{github.repository}} | tr '[:upper:]' '[:lower:]'`" >>${GITHUB_ENV}

      # Docker login
      - name: Login to Docker Hub
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Fetch Docker Image Cache
      - name: Fetch Docker Image Cache
        run: docker pull ${{env.IMAGE_URL}}:latest || true

      # Build Docker Image and tag with version, inject environment variables for RabbitMQ and DB
      - name: Build Docker Image and tag with version
        run: |
          docker build -t ${{env.IMAGE_URL}}:${{ github.event.release.tag_name }} \
            --cache-from ${{env.IMAGE_URL}}:latest \
            --build-arg ARTIFACT_PATH=${{env.APP_PUBLISH_OUTPUT_DIRECTORY}} \
            -f ${{env.APP_SRC_DIRECTORY}}/Dockerfile .

      # Push Docker Image
      - name: Push Docker Image
        run: docker push ${{env.IMAGE_URL}}:${{ github.event.release.tag_name }}

      # Tag Docker Image with latest
      - name: Tag Docker Image with latest
        run: |
          if [[ "${{ github.event.release.prerelease }}" == "false" ]]; then
            docker tag ${{env.IMAGE_URL}}:${{ github.event.release.tag_name }} ${{env.IMAGE_URL}}:latest
            docker push ${{env.IMAGE_URL}}:latest
          fi

  semantic_release:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta'
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-cache
          restore-keys: |
            ${{ runner.os }}-npm-cache
      - name: Install Dependencies
        run: |
          npm install semantic-release \
            conventional-changelog-conventionalcommits \
            @semantic-release/commit-analyzer \
            @semantic-release/git \
            @semantic-release/github \
            @semantic-release/exec \
            @semantic-release/changelog
      - name: Run Semantic Release
        run: npx semantic-release
